-- TODO --
- contrato vapaeetokens
  - agregar total depositado a la tabla ordertables
  - me falta resolver el problema de desuscribir al usuario que ya no tiene depósitos: depusers depuserstable(get_self(), get_self().value);
- website
  - Trade
    - traducir el "wanna buy" a español
    - tokens panel
      - volumen diario
      - precio actual
      - porcentage de cambio 24%
    - manejar errores cuando se genera una órden
    - listar las órdenes propias en el panel de "orden form"
    - panel de órdenes
      - la fila que tenga una orden del usuario logueado debe seleccionarse como tal
      - click:
        - sobre el precio: setea el precio en el order-form
        - sobre la línea: setea el precio, amount y determina si se quiere comprar o vender en order-form
      - título de "órdenes de compra" y "órdenes de ventas"
      - scrollbars
      - agregar en una sola línea, las ofertas que coincidan en precio.
    - Gráfica
    - Timezone: que el usuario elija su timezone para mostrar mejor los horarios de las transacciones en el historial
    - cuando se genera una transacción, el historial se actualiza y debería resaltarse temporalmente la reciente transacción.
  - Profile
    - scatter / login state
    - depósitos
      - deposit / withdraw
    - balances
    - órdenes vigentes
  - ambientar todo para deployar en vapaee.io ?
    - home page (logo, textos, lista de tokens más relevantes)
    - comprar dominio
    - resolver https
    - PWA?







transfer 0.40000000 TLOS to bob   itr->amount > amount: 1.99200000 TLOS > 0.40000000 TLOS
transfer 0.70000000 TLOS to bob   itr->amount > amount: 1.55200000 TLOS > 0.70000000 TLOS
transfer 0.14000000 TLOS to bob   itr->amount > amount: 0.78200000 TLOS > 0.14000000 TLOS
transfer 0.48000000 TLOS to bob   itr->amount > amount: 0.62800000 TLOS > 0.48000000 TLOS
transfer 0.20000000 TLOS to bob   itr->amount > amount: 0.10000000 TLOS > 0.20000000 TLOS
-------------------------------   ---------------------------------            
         1.92000000




0.07000000 TLOS
0.02000000 TLOS
0.04800000 TLOS
0.01400000 TLOS
0.04000000 TLOS
0.39000000 TLOS
---------------
0.58200000 TLOS
1.92000000 TLOS
----------------
2.50200000 TLOS









-- TODO (futuro) vapaeetokens --
- Subasta: Implementar en el contrato la Subasta
  - tengo que poder vender M (de los N XXX tokens depositados) cada T tiempo al mejor postor que page con ZZZ, hasta agotar stock.
    auction1(owner, receiver, "N.0000 XXX", "ZZZ", "M.0000 XXX", interval_time)
    auction2(owner, receiver, "N.0000 XXX", "ZZZ", total_time)
    doauction(): ejecuta el primer auction si está vencido. lo puede ejecutar cualqueira.
  - Table auction: scope contract
    {
        uint64_t id;
        name owner;
        name receiver;
        asset portion;      // XXX to sell each interval
        asset remaining;    // XXX
        asset collected;    // ZZZ
        uint64_t interval;  // interval time
        uint64_t next;      // next expire time
        uint64_t timer;     // last timer expire time
    }
  - ajustar el htransfer para que se fije si hay algún auction para ejecutar.
    - Se fija en la tabla de auctions ordenando por next.
    - Si el primero ya está vencido, lo ejecuta y agenda el siguiente si no está agendado ya.
    - si el primero no está vencido, se fija si está agendado comparando timer con next.
      Si timer < next => reagendar y actualizar timer



---------------------------------------------------------------------
---------------------------------------------------------------------
-- Mainnet ----------------------------------------------------------
---------------------------------------------------------------------
telosmain set contract vapaeetokens $PWD -p vapaeetokens@active
telosmain push action vapaeetokens addtoken '["eosio.token","TLOS",4,"vapaeetokens"]' -p vapaeetokens@active
telosmain push action vapaeetokens create '["vapaeetokens","500000000.0000 CNT"]' -p vapaeetokens@active
telosmain push action vapaeetokens setsnapshot '["snapshots.tf",1,"CNT",0,0,10000,0,"CNT Token Airdrop - Cards & Tokens - http://cardsandtokens.com"]' -p vapaeetokens@active


---------------------------------------------------------------------
---------------------------------------------------------------------
-- Testnet ----------------------------------------------------------
---------------------------------------------------------------------
telostest set contract vapaeetokens $PWD -p vapaeetokens@active
telostest push action vapaeetokens addtoken '["eosio.token","TLOS",4,"vapaeetokens"]' -p vapaeetokens@active
telostest push action vapaeetokens create '["vapaeetokens","500000000.0000 CNT"]' -p vapaeetokens@active
telostest push action vapaeetokens setsnapshot '["setsnapshot",1,"CNT",0,0,10000,0,"CNT Token Airdrop - Cards & Tokens - http://cardsandtokens.com"]' -p vapaeetokens@active




-------- TELOS SNAPSHOTS --------
telostest get table snapsnapsnap 1 snapshots --lower viterbotelos
telosmain get table snapshots.tf 1 snapshots --lower viterbotelos
cleos --url https://telos.eos.barcelona get table snapshots.tf 1 snapshots --lower geytinzygige







-- TODO futuro (contrato BG-BOX) ---
--------- Casos de uso Basico (BG-BOX) -----------
-- All --
- Register author 

-- APPs --
- Registro de una app (app_name, inventory, deposit)   // C&T
- Registro de un item Spec                   // Card, Envelop, Box
- Registro de container Spec                 // Album, Envelop, Box

-- Publisher --
- Registro de un Item Asset                  // openmic-w107-orrslaw-not-sorry: publicación de una carta específica
- Registro de un Container Asset             // openmic-100-weeks: publicación de un album concreto
- Issue copies of an Item Asset              // Crea N copias de una carta, que se sumarán al supply existente sin pasar de un máximo

-- User --
-- Swap units places (container / position)  // move cards in the inventory or album
-- use container                             // issues an instance of Container Asset
-- transfer units                            // give cards to someone else


Las aplicaciones deben ser registradas dando el account del contrato inteligente que cumple con un api para poder avisarle cada evento.
De esta manera el BG-Box se encarga con las reglas de Items y Containers Genéricos mientras que el el handler se encarga de reglas más específicas de la app.
Por ejemplo, se pueden exigir comisiones por cada evento, cumplir con mínimos o máximos, disparar otras acciones como cobrar impuesto, etc.


--------- Casos de uso Medio (BG-BOX) -----------
-- market 
  -- order units                               // creates an order to buy or sell any amount of owning copies of the same card
  -- cancel order                              // cancel previously created order
-- multiple authorship
  - hacer otra tabla donde el scope sea el user y que ahi se diga cuanto tiene cada usuario de authorship de cada item.
    por lo general vos podés hacer una carta y para esa carta va a decir que vos tenés el 100% y el resto del mundo 0%.
    pero pueden haber varias partes productoras de un mismo contenido y se arregla de antemano dividir el authorship en partes A% B% y C% dependiendo de la participación de cada uno.
  - cada vez que hay una compra o venta de un item con multimple authorship hay que dividir las ganancias respentado los porcentajes A% B% y C%
