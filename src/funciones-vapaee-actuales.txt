
// los datos del usuario vienen en crudo. Esta funci贸n procesa esos datos y sustituye referencias por ID con instancias reales
proccessData()

// los datos (cartas, albums) que pertenecen exclusivamente al usuario, esta funci贸n los deja globalmente disponibles por slug
userdata_to_global(table)

// dado un id retorna el copy y le adjunta su colectible y edition (objetos que la complementan en info)
getCopyById(id:number)

// funci贸n auxiliar privada que dados dos slots determina si lo que debe hacerse es un (replace, putin, putout, swap o move)
determineAction(from:number, fromi:number, to:number, toi:number)

// intercambia el contenido de dos slots localmente en lainterface web (no en backend)
swapLocaly(from, fromi, to, toi)

// manda hacer el swap a backend y dependiendo de si es exitoso mantienen o revierte los cambios locales previamente hechos
swapSlots(from_slug, fromi, to_slug, toi, action)

// segunda parte del claim dailyprice (cosa que coloca una carta que anda flotando de vuelta a un slot)
claimDailyPrizePart2(r:any, targetimg: Element)

// inicia una animaci贸n donde deja una carta flotando en el aire mientras ejecuta en backend un random select
claimDailyPrize(img:HTMLElement)

// obtiene desde el backend la cantidad de tiempo que el usuario logueado debe esperar para poder ejecutar el daily price
getDailyPrizeCountdown()

// 
fetchCard(slug:string)
updateCollectibleVotes(slug:string, votes:number)
fetchAlbum(slug:string)
getUserInventory(slug)
getAllInstances(table, name, params?)
getAllCards()
getAllSpecs()
getAllAlbums()
getCardBySlug(slug)
getAlbumCollectionBySlug(slug)
updateCollectionSteemPoints(coll_id)
calculateCollectionPoints(coll_id)
getCollectionStats(coll_id)
getAlbumCompleteBySlug(slug)
getJSON(file)
getCornerCardSize()
getCenterCardSize()
deployCard(card, img:HTMLElement)
deployToCenter(data, img:HTMLElement)
deployFromCenterToSlot(data, img:HTMLElement)
deployAlbum(card, img:HTMLElement)
closeCard()
createCard(model:any, deploy:any, preview:any)

