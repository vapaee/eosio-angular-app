import { Injectable } from '@angular/core';
import { Subject } from 'rxjs';
import { ScatterService } from './scatter.service';


@Injectable()
export class VapaeeService {

    public contract:string;
    vapaeeauthor:string = "vapaeeauthor";
    vapaeetokens:string = "vapaeetokens";

    public onEvent:Subject<any> = new Subject();
    private setReady: Function;
    public waitReady: Promise<any> = new Promise((resolve) => {
        this.setReady = resolve;
    });
    private setConnected: Function;
    public waitConnected: Promise<any> = new Promise((resolve) => {
        this.setConnected = resolve;
    });
    private setEosjs: Function;
    public waitEosjs: Promise<any> = new Promise((resolve) => {
        this.setEosjs = resolve;
    });
    private setEndpoints: Function;
    public waitEndpoints: Promise<any> = new Promise((resolve) => {
        this.setEndpoints = resolve;
    });    
    
    private slug: SlugUtils;
    constructor(private scatter: ScatterService) {
        this.slug = new SlugUtils();
        this.contract = this.vapaeeauthor;
    }

    droptables() {
        console.log("VapaeeService.droptables()");
        return new Promise<any>((resolve, reject) => {
            try {
                this.scatter.getContract(this.vapaeeauthor).then(contract => {
                    try {
                        contract.droptables({}, this.scatter.authorization).then((response => {
                            console.log("response", response);
                            resolve(response);
                        })).catch(err => { console.error(err); reject(err); });
                    } catch (err) { console.error(err); reject(err); }
                }).catch(err => { console.error(err); reject(err); });
            } catch (err) { console.error(err); reject(err); }
        }).catch(err => console.error(err) );
    }

    registerPublisher(owner:string, nick:string, title:string) {
        console.log("VapaeeService.registerPublisher()", owner, nick, title);
        return new Promise<any>((resolve, reject) => {
            try {
                this.scatter.getContract(this.vapaeeauthor).then(contract => {
                    try {
                        contract.newpublisher({
                            owner:  owner,
                            nickstr: nick,
                            title: title
                        }, this.scatter.authorization).then((response => {
                            resolve(response);
                        })).catch(err => { reject(err); });
                    } catch (err) { reject(err); }
                }).catch(err => { reject(err); });
            } catch (err) { reject(err); }
        }).catch(err => console.error(err) );
    }

    registerApp(owner:string, contract:string, nick:string, title:string, inventory:number) {
        console.log("VapaeeService.registerApp()", owner, contract, nick, title, inventory);
        return new Promise<any>((resolve, reject) => {
            try {
                this.scatter.getContract(this.vapaeeauthor).then(smart_contract => {
                    try {
                        smart_contract.newapp({
                            owner:  owner,
                            contract: contract,
                            nickstr: nick,
                            title: title,
                            inventory: inventory
                        }, this.scatter.authorization).then((response => {
                            resolve(response);
                        })).catch(err => { reject(err); });
                    } catch (err) { reject(err); }
                }).catch(err => { reject(err); });
            } catch (err) { reject(err); }
        }).catch(err => console.error(err) );
    }
    

    /*
    registerPublisher(owner:string, nick:string, title:string) {
        console.log("NewAppPage.register()");
        return new Promise<any>((resolve, reject) => {
            try {
                this.scatter.getContract("vapaeeauthor").then(contract => {
                    try {
                        contract.newpublisher({
                            owner:  owner,
                            nickstr: nick,
                            title: title
                        }, this.scatter.authorization).then((response => {
                            console.log("response", response);
                            resolve(response);
                        })).catch(err => {
                            console.error(err);
                            reject(err);
                        });
                    } catch (err) {
                        console.error(err);
                        reject(err);
                    }
                }).catch(err => {
                    console.error(err);
                    reject(err);
                });
            } catch (err) {
                console.error(err);
                reject(err);
            }
        });
    }
    */    
}
